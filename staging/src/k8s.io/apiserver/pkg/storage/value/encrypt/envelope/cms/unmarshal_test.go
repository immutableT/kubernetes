package cms

import (
	"bytes"
	"testing"
)

// openssl cms -encrypt -in secret.txt -aes256 -out cmsEnvelope.txt  alextc.crt
// openssl cms -in cmsEnvelope.txt -cmsout -outform PEM
var (
	referenceEnvelope = []byte{
		0x30, 0x82, 0x1, 0xdf, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x3, 0xa0, 0x82, 0x1, 0xd0, 0x30,
		0x82, 0x1, 0xcc, 0x2, 0x1, 0x0, 0x31, 0x82, 0x1, 0x87, 0x30, 0x82, 0x1, 0x83, 0x2, 0x1, 0x0, 0x30, 0x6b, 0x30,
		0x5e, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x55, 0x53, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55,
		0x4, 0x8, 0xc, 0x2, 0x57, 0x41, 0x31, 0x10, 0x30, 0xe, 0x6, 0x3, 0x55, 0x4, 0x7, 0xc, 0x7, 0x53, 0x65, 0x61, 0x74,
		0x74, 0x6c, 0x65, 0x31, 0xf, 0x30, 0xd, 0x6, 0x3, 0x55, 0x4, 0x3, 0xc, 0x6, 0x61, 0x6c, 0x65, 0x78, 0x74, 0x63,
		0x31, 0x1f, 0x30, 0x1d, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x1, 0x16, 0x10, 0x61, 0x6c, 0x65,
		0x78, 0x74, 0x63, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2, 0x9, 0x0, 0xc6, 0x67, 0x74,
		0x24, 0x9a, 0xf4, 0x76, 0xc2, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x4,
		0x82, 0x1, 0x0, 0x92, 0x98, 0xaf, 0xda, 0x7d, 0x2, 0xc2, 0xd7, 0x92, 0x74, 0xeb, 0x5c, 0x52, 0x47, 0x16, 0x5c, 0xd9,
		0xf6, 0xc3, 0x7a, 0xa9, 0xd4, 0x25, 0x28, 0xf0, 0xab, 0x23, 0x32, 0x66, 0x7e, 0x16, 0x69, 0x7b, 0x61, 0xc3, 0xd0,
		0x97, 0x63, 0x10, 0xca, 0x94, 0x57, 0xd2, 0xb1, 0x72, 0x7c, 0x63, 0x6c, 0x5, 0xf9, 0xf6, 0xc1, 0x17, 0x19, 0x9f,
		0x9, 0x3a, 0x25, 0x96, 0x24, 0x90, 0x22, 0x78, 0x85, 0xa4, 0xde, 0x41, 0x51, 0xe, 0xc7, 0x32, 0xa9, 0xce, 0x56,
		0x5a, 0xec, 0xfb, 0xb2, 0x5e, 0xf, 0x8a, 0x31, 0x4f, 0x9e, 0xb3, 0x4c, 0xe, 0xa0, 0xa3, 0xa7, 0x2d, 0xa5, 0x15,
		0xd8, 0x10, 0x87, 0x84, 0x34, 0x1c, 0xd3, 0x0, 0xbe, 0xaa, 0x49, 0x6f, 0xfd, 0x93, 0xd0, 0xd6, 0xd8, 0x9d, 0x1c,
		0xa5, 0x29, 0xaf, 0x70, 0x85, 0x81, 0x60, 0xb8, 0xe1, 0x1d, 0x8a, 0xe5, 0x7a, 0x1d, 0xc6, 0x1c, 0x6a, 0x5b, 0xfa,
		0xe, 0xe9, 0xd5, 0xdc, 0xf2, 0xcf, 0x95, 0x82, 0x2, 0x5d, 0x22, 0x8, 0xcb, 0x1d, 0x41, 0x1a, 0x7d, 0x63, 0x1d, 0xd1,
		0x61, 0x9, 0xf4, 0x7, 0x3e, 0xd9, 0x21, 0x95, 0x6f, 0x86, 0x40, 0x12, 0x82, 0xa3, 0x52, 0x1, 0xd7, 0x32, 0xe4, 0xe9,
		0x1, 0x4e, 0x71, 0x37, 0xdc, 0xdb, 0x7c, 0x2d, 0xe9, 0xbd, 0xbf, 0xa0, 0xf1, 0x8a, 0x4e, 0xa9, 0x4f, 0xad, 0x46,
		0x65, 0x9, 0xe0, 0x5a, 0xc2, 0x39, 0x97, 0x13, 0xc2, 0xb7, 0x75, 0xc5, 0x4a, 0xee, 0xa2, 0xd4, 0xfc, 0xa4, 0x9a,
		0x92, 0x95, 0xdc, 0xa4, 0x9a, 0x4c, 0x94, 0x8b, 0x80, 0x92, 0x8f, 0xb7, 0x1b, 0xc1, 0xdf, 0x9, 0x5, 0xd6, 0xa7, 0x62,
		0x4a, 0x35, 0x8a, 0x65, 0xa4, 0xf2, 0x65, 0xf8, 0x7b, 0xbc, 0x68, 0xd0, 0xd7, 0x16, 0xfd, 0x8a, 0xa2, 0x56, 0x51,
		0x18, 0x53, 0xbc, 0x1d, 0x86, 0xdb, 0x5a, 0xb9, 0x30, 0x3c, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7,
		0x1, 0x30, 0x1d, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2a, 0x4, 0x10, 0x14, 0x14, 0x81, 0xb2, 0xbf,
		0x6e, 0xdc, 0x88, 0xf3, 0xbe, 0xe6, 0x72, 0x97, 0x43, 0x49, 0x92, 0x80, 0x10, 0xf0, 0xd9, 0x10, 0x97, 0x30, 0x4b,
		0x82, 0xe8, 0xd8, 0x94, 0x30, 0xc, 0xa0, 0x2f, 0x40, 0x8d}

	// DEK used in testCMSEnvelope
	decryptedDEK = []byte{
		91, 81, 103, 129, 167, 171, 49, 149, 157, 252, 192, 207, 202, 64, 7, 132,
		96, 186, 94, 23, 59, 49, 8, 241, 199, 168, 138, 107, 7, 245, 13, 73}

	// openssl cms -in cmsEnvelope.txt -cmsout -print
	// penssl asn1parse -in msg.pem
	encryptedDEK = []byte{
		0x61, 0x5e, 0x6e, 0xb1, 0x55, 0x93, 0x3d, 0x20,0x7f, 0x25, 0x42, 0xe3, 0x21, 0x11, 0x82,
		0x2e, 0x99, 0x4d, 0xff, 0x76, 0x88, 0x60, 0x52, 0xf6, 0x0c, 0x61, 0x68, 0x6b, 0x21, 0x97,
		0x9d, 0xd2, 0x84, 0xc8, 0x6b, 0xd5, 0x44, 0x24, 0xb7, 0xdd, 0x74, 0x1c, 0xe9, 0x54, 0x71,
		0x02, 0x15, 0x4b, 0xe8, 0xc6, 0x87, 0xbb, 0x87, 0xe2, 0xd9, 0xf9, 0xc7, 0x42, 0xcd, 0xca,
		0xd3, 0x86, 0x85, 0x68, 0xe0, 0x77, 0xf1, 0x2f, 0x31, 0x91, 0xac, 0xa1, 0xf8, 0xd9, 0x6b,
		0x57, 0x5a, 0xd3, 0xe7, 0x45, 0xdc, 0x04, 0xdf, 0xd3, 0x1e, 0xb3, 0x62, 0xd9, 0x47, 0x8a,
		0x84, 0xbd, 0x12, 0x49, 0x1c, 0x4a, 0xa7, 0x31, 0xb7, 0xf9, 0x2e, 0x54, 0x46, 0x1c, 0xfb,
		0x56, 0xee, 0xe0, 0x2d, 0xb2, 0x11, 0x52, 0x9e, 0x4a, 0x10, 0xf6, 0x8b, 0xc6, 0x02, 0x60,
		0x2a, 0xb0, 0x57, 0xc0, 0x0f, 0x26, 0x4f, 0x64, 0x20, 0x16, 0x89, 0xa5, 0x23, 0x5c, 0x02,
		0x7c, 0x00, 0x9c, 0x9a, 0x1e, 0xa6, 0x5b, 0xa8, 0xbf, 0x31, 0x7e, 0x3f, 0x91, 0x39, 0xca,
		0xf2, 0xaa, 0x8e, 0x8a, 0xb5, 0xe5, 0xc1, 0xd9, 0x9c, 0xc0, 0x57, 0x5d, 0x50, 0xe6, 0xa2,
		0xcc, 0xa7, 0xb7, 0x53, 0x6e, 0x1e, 0x00, 0xfc, 0x22, 0xce, 0xaf, 0xfd, 0x85, 0x77, 0xa5,
		0x70, 0x4c, 0xa9, 0x35, 0x91, 0xbe, 0x71, 0x63, 0xf6, 0x5b, 0x1e, 0x33, 0x74, 0x39, 0x65,
		0xc9, 0xb7, 0xe9, 0xd8, 0xd7, 0xc2, 0x64, 0x26, 0x99, 0x8d, 0x7a, 0xb4, 0x24, 0x09, 0x98,
		0xcf, 0x48, 0x45, 0x43, 0x51, 0x4f, 0x5f, 0x52, 0xf9, 0xbd, 0x48, 0xc8, 0x51, 0x82, 0x88,
		0x19, 0x19, 0xf0, 0xfa, 0x84, 0xa4, 0x5f, 0x84, 0xe2, 0x49, 0xd6, 0x2a, 0x0f, 0xb8, 0xf6,
		0x76, 0xbd, 0x34, 0x70, 0x86, 0xfa, 0x2c, 0x08, 0x6e, 0xa5, 0x29, 0xc4, 0xe6, 0x54, 0xc5,
		0x6c,
	}

	encryptedData = []byte{
		0xA7, 0x4C, 0x93, 0xD3, 0x45, 0xD8, 0x6D, 0x60, 0xC9, 0xD2, 0xBE, 0xBF, 0xA4, 0xDA, 0x48, 0xA4}
	// IV used in testCMSEnvelope
	iv = []byte{20, 20, 129, 178, 191, 110, 220, 136, 243, 190, 230, 114, 151, 67, 73, 146}

	data = []byte("Hello CMS.")

	kms = NewAsymmetricKMS()
)

func TestUnMarshalCertificateSN(t *testing.T) {
	e, err := unmarshal(referenceEnvelope)
	if err != nil {
		t.Fatalf("failed to deserialize, err: %v", err)
	}

	r := e.recipient(cert.SerialNumber)
	if r.RecipientIdentifier.SerialNumber.Cmp(cert.SerialNumber) != 0 {
		t.Fatalf("got %v, wat %v", r.RecipientIdentifier.SerialNumber, cert.SerialNumber)
	}
}

func TestDataEncryptionAlg(t *testing.T) {
	e, err := unmarshal(referenceEnvelope)
	if err != nil {
		t.Fatalf("failed to deserialize, err: %v", err)
	}

	if ! e.Content.EncryptedContentInfo.ContentEncryptionAlgorithm.Algorithm.Equal(oidEncryptionAlgorithmAES256CBC) {
		t.Fatalf("got %v, want %v", e.Content.EncryptedContentInfo.ContentEncryptionAlgorithm.Algorithm, oidEncryptionAlgorithmAES256CBC)
	}
}

func TestUnMarshalKeyEncryptionAlg(t *testing.T) {
	e, err := unmarshal(referenceEnvelope)
	if err != nil {
		t.Fatalf("failed to deserialize, err: %v", err)
	}

	r := e.recipient(cert.SerialNumber)
	if ! oidRSAEncryption.Equal(r.KeyEncryptionAlgorithm.Algorithm) {
		t.Fatalf("got %v, wat %v", r.KeyEncryptionAlgorithm.Algorithm, oidRSAEncryption)
	}
}

func TestUnMarshalDEK(t *testing.T) {
	e, err := unmarshal(referenceEnvelope)
	if err != nil {
		t.Fatalf("failed to deserialize, err: %v", err)
	}

	gotDEK, err := e.dek(cert.SerialNumber, kms)
	if err != nil {
		t.Fatalf("failed to get DEK, err: %v", err)
	}

	if !bytes.Equal(gotDEK, decryptedDEK) {
		t.Fatalf("got %v, want %v", gotDEK, decryptedDEK)
	}
}

func TestUnMarshalData(t *testing.T) {
	e, err := unmarshal(referenceEnvelope)
	if err != nil {
		t.Fatalf("failed to deserialize, err: %v", err)
	}

	gotData, err := e.unWrap(cert.SerialNumber, kms, decryptAESCBC)
	if err != nil {
		t.Fatalf("failed to get data, err: %v", err)
	}

	if !bytes.Equal(gotData, data) {
		t.Fatalf("got %v, want %v", gotData, data)
	}
}

